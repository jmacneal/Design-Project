-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/hdl_ofdm_tx/bit_reversal.vhd
-- Created: 2018-02-27 13:25:18
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: bit_reversal
-- Source Path: hdl_ofdm_tx/bit_reversal
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.hdl_ofdm_tx_pkg.ALL;

ENTITY bit_reversal IS
  PORT( u_re                              :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
        u_im                              :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
        y_re                              :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
        y_im                              :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En13 [16]
        );
END bit_reversal;


ARCHITECTURE rtl OF bit_reversal IS

  -- Signals
  SIGNAL u_re_signed                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL u_im_signed                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL y_re_tmp                         : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL y_im_tmp                         : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]

BEGIN
  outputgen3: FOR k IN 0 TO 15 GENERATE
    u_re_signed(k) <= signed(u_re(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 15 GENERATE
    u_im_signed(k) <= signed(u_im(k));
  END GENERATE;

  bit_reversal_1_output : PROCESS (u_re_signed, u_im_signed)
    VARIABLE i1 : signed(31 DOWNTO 0);
    VARIABLE i2 : signed(31 DOWNTO 0);
  BEGIN

    FOR k1 IN 0 TO 15 LOOP
      i1 := to_signed(k1, 32);
      i2 := to_signed(16#00000000#, 32);

      FOR k2 IN 0 TO 3 LOOP
        i2 := (i2 sll 1) OR (i1 AND to_signed(16#00000001#, 32));
        i1 := SHIFT_RIGHT(i1, 1);
      END LOOP;

      y_re_tmp(k1) <= u_re_signed(to_integer(i2));
      y_im_tmp(k1) <= u_im_signed(to_integer(i2));
    END LOOP;

  END PROCESS bit_reversal_1_output;


  outputgen1: FOR k IN 0 TO 15 GENERATE
    y_re(k) <= std_logic_vector(y_re_tmp(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 15 GENERATE
    y_im(k) <= std_logic_vector(y_im_tmp(k));
  END GENERATE;

END rtl;

