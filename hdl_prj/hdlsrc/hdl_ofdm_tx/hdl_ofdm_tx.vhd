-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/hdl_ofdm_tx/hdl_ofdm_tx.vhd
-- Created: 2018-02-27 13:25:18
-- 
-- Generated by MATLAB 9.3 and HDL Coder 3.11
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.0001
-- Target subsystem base rate: 0.0001
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.0001
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- tx_signal                     ce_out        0.0001
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hdl_ofdm_tx
-- Source Path: hdl_ofdm_tx
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work_hdl_modulator;
USE work.hdl_ofdm_tx_pkg.ALL;

ENTITY hdl_ofdm_tx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        tx_signal                         :   OUT   std_logic_vector(36 DOWNTO 0)  -- sfix37_En27
        );
END hdl_ofdm_tx;


ARCHITECTURE rtl OF hdl_ofdm_tx IS

  -- Component Declarations
  COMPONENT hdl_ofdm_tx_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT bit_reversal
    PORT( u_re                            :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          u_im                            :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          y_re                            :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          y_im                            :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En13 [16]
          );
  END COMPONENT;

  COMPONENT ifft
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector20(0 TO 15);  -- sfix20_En13 [16]
          dataOut_im                      :   OUT   vector_of_std_logic_vector20(0 TO 15);  -- sfix20_En13 [16]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hdl_modulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          real_signal                     :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En13
          imag_signal                     :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En13
          baseband_mixed_signal           :   OUT   std_logic_vector(36 DOWNTO 0)  -- sfix37_En27
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : hdl_ofdm_tx_tc
    USE ENTITY work.hdl_ofdm_tx_tc(rtl);

  FOR ALL : bit_reversal
    USE ENTITY work.bit_reversal(rtl);

  FOR ALL : ifft
    USE ENTITY work.ifft(rtl);

  FOR ALL : hdl_modulator
    USE ENTITY work_hdl_modulator.hdl_modulator_hdl_modulator(rtl);

  -- Constants
  CONSTANT alpha_table_data_re            : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im            : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_4          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_4          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_6          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_6          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_8          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_8          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_10         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_10         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_12         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_12         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_14         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_14         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_16         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_16         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_18         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_18         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_20         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_20         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_22         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_22         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_24         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_24         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_26         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_26         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_28         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_28         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_30         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_30         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL Model_out1                       : std_logic_vector(36 DOWNTO 0);  -- ufix37
  SIGNAL deserializer_contl_cnt           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL deserializer_contl_validOutput   : std_logic;
  SIGNAL deserializer_innerRegEn          : std_logic;
  SIGNAL deserializer_innerRegCtrolEn     : std_logic;
  SIGNAL deserializer_outBypassEn         : std_logic;
  SIGNAL deserializer_tapDelayEn          : std_logic;
  SIGNAL deserializer_hOutSignalsContl    : std_logic;
  SIGNAL deserializer_tapDelayEn_1        : std_logic;
  SIGNAL In1_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL deserializer_tapout              : vector_of_unsigned8(0 TO 14);  -- uint8 [15]
  SIGNAL deserializer_muxOut              : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL deserializer_out1                : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL deserializer_out1_0              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_0_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_0_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_1              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_1        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_1_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_1_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_2              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_2        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_2_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_2_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_3              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_3        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_3_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_3_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_4              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_4        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_4_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_4_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_5              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_5        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_5_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_5_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_6              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_6        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_6_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_6_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_7              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_7        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_7_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_7_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_8              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_8        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_8_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_8_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_9              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_9        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_9_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_9_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_10             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_10       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_10_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_10_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_11             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_11       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_11_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_11_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_12             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_12       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_12_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_12_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_13             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_13       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_13_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_13_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_14             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_14       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_14_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_14_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL deserializer_out1_15             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_15       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_15_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL qam_mod_15_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Mux_out1_re                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL Mux_out1_im                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL Mux_out1_re_1                    : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Mux_out1_im_1                    : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL y_re                             : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL y_im                             : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL deserializer_out2                : std_logic;
  SIGNAL ifft_out1_re                     : vector_of_std_logic_vector20(0 TO 15);  -- ufix20 [16]
  SIGNAL ifft_out1_im                     : vector_of_std_logic_vector20(0 TO 15);  -- ufix20 [16]
  SIGNAL ifft_out2                        : std_logic;
  SIGNAL real_serializer_contl_cnt        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL real_serializer_invldSignal      : std_logic;
  SIGNAL ifft_out1_re_signed              : vector_of_signed20(0 TO 15);  -- sfix20_En13 [16]
  SIGNAL ifft_out1_im_signed              : vector_of_signed20(0 TO 15);  -- sfix20_En13 [16]
  SIGNAL serial_in_1                      : vector_of_signed20(0 TO 15);  -- sfix20_En13 [16]
  SIGNAL imag_serializer_contl_cnt        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL imag_serializer_invldSignal      : std_logic;
  SIGNAL serial_in_1_1                    : vector_of_signed20(0 TO 15);  -- sfix20_En13 [16]
  SIGNAL real_serializer_data             : vector_of_signed20(0 TO 14);  -- sfix20 [15]
  SIGNAL real_serializer_data_next        : vector_of_signed20(0 TO 14);  -- sfix20_En13 [15]
  SIGNAL serializer_PostProcessed_2       : signed(19 DOWNTO 0);  -- sfix20_En13
  SIGNAL imag_serializer_data             : vector_of_signed20(0 TO 14);  -- sfix20 [15]
  SIGNAL imag_serializer_data_next        : vector_of_signed20(0 TO 14);  -- sfix20_En13 [15]
  SIGNAL serializer_PostProcessed_3       : signed(19 DOWNTO 0);  -- sfix20_En13

BEGIN
  u_hdl_ofdm_tx_tc : hdl_ofdm_tx_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_16_0 => enb_1_16_0
              );

  u_bit_reversal : bit_reversal
    PORT MAP( u_re => Mux_out1_re_1,  -- sfix16_En13 [16]
              u_im => Mux_out1_im_1,  -- sfix16_En13 [16]
              y_re => y_re,  -- sfix16_En13 [16]
              y_im => y_im  -- sfix16_En13 [16]
              );

  u_ifft : ifft
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              dataIn_re => y_re,  -- sfix16_En13 [16]
              dataIn_im => y_im,  -- sfix16_En13 [16]
              validIn => deserializer_out2,
              dataOut_re => ifft_out1_re,  -- sfix20_En13 [16]
              dataOut_im => ifft_out1_im,  -- sfix20_En13 [16]
              validOut => ifft_out2
              );

  u_Model : hdl_modulator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              real_signal => std_logic_vector(serializer_PostProcessed_2),  -- sfix20_En13
              imag_signal => std_logic_vector(serializer_PostProcessed_3),  -- sfix20_En13
              baseband_mixed_signal => Model_out1  -- sfix37_En27
              );

  deserializer_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      deserializer_contl_cnt <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF deserializer_contl_cnt = to_unsigned(16#0F#, 5) THEN 
          deserializer_contl_cnt <= to_unsigned(16#00#, 5);
        ELSE 
          deserializer_contl_cnt <= deserializer_contl_cnt + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS deserializer_contl_process;

  deserializer_tapDelayEn <= hdlcoder_to_stdlogic(deserializer_contl_cnt < to_unsigned(16#0F#, 5));
  
  deserializer_contl_validOutput <= '1' WHEN deserializer_contl_cnt = to_unsigned(16#0F#, 5) ELSE
      '0';
  
  deserializer_hOutSignalsContl <= '1' WHEN deserializer_contl_validOutput = '1' ELSE
      '0';
  
  deserializer_innerRegEn <= '1' WHEN deserializer_contl_validOutput = '1' ELSE
      '0';
  
  deserializer_innerRegCtrolEn <= '1' WHEN deserializer_contl_validOutput = '1' ELSE
      '0';
  deserializer_outBypassEn <= '1';

  deserializer_tapDelayEn_1 <= enb AND deserializer_tapDelayEn;

  In1_unsigned <= unsigned(In1);

  deserializer_tapDelayComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      deserializer_tapout <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND deserializer_tapDelayEn_1 = '1' THEN
        deserializer_tapout(14) <= In1_unsigned;
        deserializer_tapout(0 TO 13) <= deserializer_tapout(1 TO 14);
      END IF;
    END IF;
  END PROCESS deserializer_tapDelayComp_process;


  deserializer_muxOut(0) <= deserializer_tapout(0);
  deserializer_muxOut(1) <= deserializer_tapout(1);
  deserializer_muxOut(2) <= deserializer_tapout(2);
  deserializer_muxOut(3) <= deserializer_tapout(3);
  deserializer_muxOut(4) <= deserializer_tapout(4);
  deserializer_muxOut(5) <= deserializer_tapout(5);
  deserializer_muxOut(6) <= deserializer_tapout(6);
  deserializer_muxOut(7) <= deserializer_tapout(7);
  deserializer_muxOut(8) <= deserializer_tapout(8);
  deserializer_muxOut(9) <= deserializer_tapout(9);
  deserializer_muxOut(10) <= deserializer_tapout(10);
  deserializer_muxOut(11) <= deserializer_tapout(11);
  deserializer_muxOut(12) <= deserializer_tapout(12);
  deserializer_muxOut(13) <= deserializer_tapout(13);
  deserializer_muxOut(14) <= deserializer_tapout(14);
  deserializer_muxOut(15) <= unsigned(In1);

  deserializer_regComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      deserializer_out1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND deserializer_innerRegEn = '1' THEN
        deserializer_out1 <= deserializer_muxOut;
      END IF;
    END IF;
  END PROCESS deserializer_regComp_process;


  deserializer_out1_0 <= deserializer_out1(0);

  constellationLUTaddress <= deserializer_out1_0(3 DOWNTO 0);

  qam_mod_0_out1_re <= alpha_table_data_re(to_integer(constellationLUTaddress));
  qam_mod_0_out1_im <= alpha_table_data_im(to_integer(constellationLUTaddress));

  deserializer_out1_1 <= deserializer_out1(1);

  constellationLUTaddress_1 <= deserializer_out1_1(3 DOWNTO 0);

  qam_mod_1_out1_re <= alpha_table_data_re_2(to_integer(constellationLUTaddress_1));
  qam_mod_1_out1_im <= alpha_table_data_im_2(to_integer(constellationLUTaddress_1));

  deserializer_out1_2 <= deserializer_out1(2);

  constellationLUTaddress_2 <= deserializer_out1_2(3 DOWNTO 0);

  qam_mod_2_out1_re <= alpha_table_data_re_4(to_integer(constellationLUTaddress_2));
  qam_mod_2_out1_im <= alpha_table_data_im_4(to_integer(constellationLUTaddress_2));

  deserializer_out1_3 <= deserializer_out1(3);

  constellationLUTaddress_3 <= deserializer_out1_3(3 DOWNTO 0);

  qam_mod_3_out1_re <= alpha_table_data_re_6(to_integer(constellationLUTaddress_3));
  qam_mod_3_out1_im <= alpha_table_data_im_6(to_integer(constellationLUTaddress_3));

  deserializer_out1_4 <= deserializer_out1(4);

  constellationLUTaddress_4 <= deserializer_out1_4(3 DOWNTO 0);

  qam_mod_4_out1_re <= alpha_table_data_re_8(to_integer(constellationLUTaddress_4));
  qam_mod_4_out1_im <= alpha_table_data_im_8(to_integer(constellationLUTaddress_4));

  deserializer_out1_5 <= deserializer_out1(5);

  constellationLUTaddress_5 <= deserializer_out1_5(3 DOWNTO 0);

  qam_mod_5_out1_re <= alpha_table_data_re_10(to_integer(constellationLUTaddress_5));
  qam_mod_5_out1_im <= alpha_table_data_im_10(to_integer(constellationLUTaddress_5));

  deserializer_out1_6 <= deserializer_out1(6);

  constellationLUTaddress_6 <= deserializer_out1_6(3 DOWNTO 0);

  qam_mod_6_out1_re <= alpha_table_data_re_12(to_integer(constellationLUTaddress_6));
  qam_mod_6_out1_im <= alpha_table_data_im_12(to_integer(constellationLUTaddress_6));

  deserializer_out1_7 <= deserializer_out1(7);

  constellationLUTaddress_7 <= deserializer_out1_7(3 DOWNTO 0);

  qam_mod_7_out1_re <= alpha_table_data_re_14(to_integer(constellationLUTaddress_7));
  qam_mod_7_out1_im <= alpha_table_data_im_14(to_integer(constellationLUTaddress_7));

  deserializer_out1_8 <= deserializer_out1(8);

  constellationLUTaddress_8 <= deserializer_out1_8(3 DOWNTO 0);

  qam_mod_8_out1_re <= alpha_table_data_re_16(to_integer(constellationLUTaddress_8));
  qam_mod_8_out1_im <= alpha_table_data_im_16(to_integer(constellationLUTaddress_8));

  deserializer_out1_9 <= deserializer_out1(9);

  constellationLUTaddress_9 <= deserializer_out1_9(3 DOWNTO 0);

  qam_mod_9_out1_re <= alpha_table_data_re_18(to_integer(constellationLUTaddress_9));
  qam_mod_9_out1_im <= alpha_table_data_im_18(to_integer(constellationLUTaddress_9));

  deserializer_out1_10 <= deserializer_out1(10);

  constellationLUTaddress_10 <= deserializer_out1_10(3 DOWNTO 0);

  qam_mod_10_out1_re <= alpha_table_data_re_20(to_integer(constellationLUTaddress_10));
  qam_mod_10_out1_im <= alpha_table_data_im_20(to_integer(constellationLUTaddress_10));

  deserializer_out1_11 <= deserializer_out1(11);

  constellationLUTaddress_11 <= deserializer_out1_11(3 DOWNTO 0);

  qam_mod_11_out1_re <= alpha_table_data_re_22(to_integer(constellationLUTaddress_11));
  qam_mod_11_out1_im <= alpha_table_data_im_22(to_integer(constellationLUTaddress_11));

  deserializer_out1_12 <= deserializer_out1(12);

  constellationLUTaddress_12 <= deserializer_out1_12(3 DOWNTO 0);

  qam_mod_12_out1_re <= alpha_table_data_re_24(to_integer(constellationLUTaddress_12));
  qam_mod_12_out1_im <= alpha_table_data_im_24(to_integer(constellationLUTaddress_12));

  deserializer_out1_13 <= deserializer_out1(13);

  constellationLUTaddress_13 <= deserializer_out1_13(3 DOWNTO 0);

  qam_mod_13_out1_re <= alpha_table_data_re_26(to_integer(constellationLUTaddress_13));
  qam_mod_13_out1_im <= alpha_table_data_im_26(to_integer(constellationLUTaddress_13));

  deserializer_out1_14 <= deserializer_out1(14);

  constellationLUTaddress_14 <= deserializer_out1_14(3 DOWNTO 0);

  qam_mod_14_out1_re <= alpha_table_data_re_28(to_integer(constellationLUTaddress_14));
  qam_mod_14_out1_im <= alpha_table_data_im_28(to_integer(constellationLUTaddress_14));

  deserializer_out1_15 <= deserializer_out1(15);

  constellationLUTaddress_15 <= deserializer_out1_15(3 DOWNTO 0);

  qam_mod_15_out1_re <= alpha_table_data_re_30(to_integer(constellationLUTaddress_15));
  qam_mod_15_out1_im <= alpha_table_data_im_30(to_integer(constellationLUTaddress_15));

  Mux_out1_re(0) <= qam_mod_0_out1_re;
  Mux_out1_re(1) <= qam_mod_1_out1_re;
  Mux_out1_re(2) <= qam_mod_2_out1_re;
  Mux_out1_re(3) <= qam_mod_3_out1_re;
  Mux_out1_re(4) <= qam_mod_4_out1_re;
  Mux_out1_re(5) <= qam_mod_5_out1_re;
  Mux_out1_re(6) <= qam_mod_6_out1_re;
  Mux_out1_re(7) <= qam_mod_7_out1_re;
  Mux_out1_re(8) <= qam_mod_8_out1_re;
  Mux_out1_re(9) <= qam_mod_9_out1_re;
  Mux_out1_re(10) <= qam_mod_10_out1_re;
  Mux_out1_re(11) <= qam_mod_11_out1_re;
  Mux_out1_re(12) <= qam_mod_12_out1_re;
  Mux_out1_re(13) <= qam_mod_13_out1_re;
  Mux_out1_re(14) <= qam_mod_14_out1_re;
  Mux_out1_re(15) <= qam_mod_15_out1_re;

  outputgen3: FOR k IN 0 TO 15 GENERATE
    Mux_out1_re_1(k) <= std_logic_vector(Mux_out1_re(k));
  END GENERATE;

  Mux_out1_im(0) <= qam_mod_0_out1_im;
  Mux_out1_im(1) <= qam_mod_1_out1_im;
  Mux_out1_im(2) <= qam_mod_2_out1_im;
  Mux_out1_im(3) <= qam_mod_3_out1_im;
  Mux_out1_im(4) <= qam_mod_4_out1_im;
  Mux_out1_im(5) <= qam_mod_5_out1_im;
  Mux_out1_im(6) <= qam_mod_6_out1_im;
  Mux_out1_im(7) <= qam_mod_7_out1_im;
  Mux_out1_im(8) <= qam_mod_8_out1_im;
  Mux_out1_im(9) <= qam_mod_9_out1_im;
  Mux_out1_im(10) <= qam_mod_10_out1_im;
  Mux_out1_im(11) <= qam_mod_11_out1_im;
  Mux_out1_im(12) <= qam_mod_12_out1_im;
  Mux_out1_im(13) <= qam_mod_13_out1_im;
  Mux_out1_im(14) <= qam_mod_14_out1_im;
  Mux_out1_im(15) <= qam_mod_15_out1_im;

  outputgen2: FOR k IN 0 TO 15 GENERATE
    Mux_out1_im_1(k) <= std_logic_vector(Mux_out1_im(k));
  END GENERATE;

  deserializer_regComp_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      deserializer_out2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND deserializer_innerRegCtrolEn = '1' THEN
        deserializer_out2 <= deserializer_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS deserializer_regComp_1_process;


  real_serializer_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      real_serializer_contl_cnt <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF real_serializer_contl_cnt = to_unsigned(16#F#, 4) THEN 
          real_serializer_contl_cnt <= to_unsigned(16#0#, 4);
        ELSE 
          real_serializer_contl_cnt <= real_serializer_contl_cnt + to_unsigned(16#1#, 4);
        END IF;
      END IF;
    END IF;
  END PROCESS real_serializer_contl_process;

  
  real_serializer_invldSignal <= '1' WHEN real_serializer_contl_cnt = to_unsigned(16#0#, 4) ELSE
      '0';

  outputgen1: FOR k IN 0 TO 15 GENERATE
    ifft_out1_re_signed(k) <= signed(ifft_out1_re(k));
  END GENERATE;

  serial_in_1 <= ifft_out1_re_signed;

  imag_serializer_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      imag_serializer_contl_cnt <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF imag_serializer_contl_cnt = to_unsigned(16#F#, 4) THEN 
          imag_serializer_contl_cnt <= to_unsigned(16#0#, 4);
        ELSE 
          imag_serializer_contl_cnt <= imag_serializer_contl_cnt + to_unsigned(16#1#, 4);
        END IF;
      END IF;
    END IF;
  END PROCESS imag_serializer_contl_process;

  
  imag_serializer_invldSignal <= '1' WHEN imag_serializer_contl_cnt = to_unsigned(16#0#, 4) ELSE
      '0';

  outputgen: FOR k IN 0 TO 15 GENERATE
    ifft_out1_im_signed(k) <= signed(ifft_out1_im(k));
  END GENERATE;

  serial_in_1_1 <= ifft_out1_im_signed;

  real_serializer_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      real_serializer_data <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        real_serializer_data <= real_serializer_data_next;
      END IF;
    END IF;
  END PROCESS real_serializer_process;

  real_serializer_output : PROCESS (real_serializer_data, real_serializer_invldSignal, serial_in_1)
  BEGIN
    real_serializer_data_next <= real_serializer_data;
    IF real_serializer_invldSignal /= '0' THEN 
      serializer_PostProcessed_2 <= serial_in_1(0);
    ELSE 
      serializer_PostProcessed_2 <= real_serializer_data(0);
    END IF;
    IF real_serializer_invldSignal /= '0' THEN 
      real_serializer_data_next(0 TO 14) <= serial_in_1(1 TO 15);
    ELSE 
      real_serializer_data_next(0 TO 13) <= real_serializer_data(1 TO 14);
      real_serializer_data_next(14) <= serial_in_1(15);
    END IF;
  END PROCESS real_serializer_output;


  imag_serializer_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      imag_serializer_data <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        imag_serializer_data <= imag_serializer_data_next;
      END IF;
    END IF;
  END PROCESS imag_serializer_process;

  imag_serializer_output : PROCESS (imag_serializer_data, imag_serializer_invldSignal, serial_in_1_1)
  BEGIN
    imag_serializer_data_next <= imag_serializer_data;
    IF imag_serializer_invldSignal /= '0' THEN 
      serializer_PostProcessed_3 <= serial_in_1_1(0);
    ELSE 
      serializer_PostProcessed_3 <= imag_serializer_data(0);
    END IF;
    IF imag_serializer_invldSignal /= '0' THEN 
      imag_serializer_data_next(0 TO 14) <= serial_in_1_1(1 TO 15);
    ELSE 
      imag_serializer_data_next(0 TO 13) <= imag_serializer_data(1 TO 14);
      imag_serializer_data_next(14) <= serial_in_1_1(15);
    END IF;
  END PROCESS imag_serializer_output;


  ce_out <= enb_1_1_1;

  tx_signal <= Model_out1;

END rtl;

