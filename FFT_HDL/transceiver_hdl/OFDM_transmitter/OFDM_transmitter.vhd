-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/OFDM_transmitter/OFDM_transmitter.vhd
-- Created: 2017-03-27 15:50:06
-- 
-- Generated by MATLAB 9.1 and HDL Coder 3.9
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.02
-- Target subsystem base rate: 0.02
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.32
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- real_rsvd                     ce_out        0.32
-- imag                          ce_out        0.32
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: OFDM_transmitter
-- Source Path: OFDM_transmitter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.OFDM_transmitter_pkg.ALL;

ENTITY OFDM_transmitter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        real_rsvd                         :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
        imag                              :   OUT   vector_of_std_logic_vector16(0 TO 15)  -- sfix16_En13 [16]
        );
END OFDM_transmitter;


ARCHITECTURE rtl OF OFDM_transmitter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT OFDM_transmitter_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic;
          enb_1_16_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IFFT_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 15);  -- sfix16_En13 [16]
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : OFDM_transmitter_tc
    USE ENTITY work.OFDM_transmitter_tc(rtl);

  FOR ALL : IFFT_HDL_Optimized
    USE ENTITY work.IFFT_HDL_Optimized(rtl);

  -- Constants
  CONSTANT alpha_table_data_re            : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im            : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_4          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_4          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_6          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_6          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_8          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_8          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_10         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_10         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_12         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_12         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_14         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_14         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_16         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_16         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_18         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_18         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_20         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_20         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_22         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_22         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_24         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_24         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_26         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_26         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_28         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_28         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_30         : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_30         : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_16_1                       : std_logic;
  SIGNAL Deserializer1D_contl_cnt         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Deserializer1D_contl_validOutput : std_logic;
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Counter_Limited1_out1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Deserializer1D_tapout            : vector_of_unsigned8(0 TO 14);  -- uint8 [15]
  SIGNAL Deserializer1D_muxOut            : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Deserializer1D_out1              : vector_of_unsigned8(0 TO 15);  -- uint8 [16]
  SIGNAL Deserializer1D_out1_0            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_1            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_1        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband1_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband1_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_2            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_2        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband2_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband2_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_3            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_3        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband3_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband3_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_4            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_4        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband4_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband4_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_5            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_5        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband5_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband5_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_6            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_6        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband6_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband6_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_7            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_7        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband7_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband7_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_8            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_8        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband8_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband8_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_9            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_9        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband9_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband9_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_10           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_10       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband10_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband10_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_11           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_11       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband11_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband11_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_12           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_12       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband12_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband12_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_13           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_13       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband13_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband13_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_14           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_14       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband14_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband14_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Deserializer1D_out1_15           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress_15       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband15_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband15_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Mux_out1_re                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL Mux_out1_im                      : vector_of_signed16(0 TO 15);  -- sfix16_En13 [16]
  SIGNAL Mux_out1_re_1                    : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Mux_out1_im_1                    : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL IFFT_HDL_Optimized_out1_re       : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL IFFT_HDL_Optimized_out1_im       : vector_of_std_logic_vector16(0 TO 15);  -- ufix16 [16]
  SIGNAL IFFT_HDL_Optimized_out2          : std_logic;

BEGIN
  u_OFDM_transmitter_tc : OFDM_transmitter_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1
              );

  u_IFFT_HDL_Optimized : IFFT_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              dataIn_re => Mux_out1_re_1,  -- sfix16_En13 [16]
              dataIn_im => Mux_out1_im_1,  -- sfix16_En13 [16]
              validIn => Constant_out1,
              dataOut_re => IFFT_HDL_Optimized_out1_re,  -- sfix16_En13 [16]
              dataOut_im => IFFT_HDL_Optimized_out1_im,  -- sfix16_En13 [16]
              validOut => IFFT_HDL_Optimized_out2
              );

  Deserializer1D_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_contl_cnt <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Deserializer1D_contl_cnt = to_unsigned(16#0F#, 5) THEN 
          Deserializer1D_contl_cnt <= to_unsigned(16#00#, 5);
        ELSE 
          Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_tapDelayEn <= hdlcoder_to_stdlogic(Deserializer1D_contl_cnt < to_unsigned(16#0F#, 5));
  
  Deserializer1D_contl_validOutput <= '1' WHEN Deserializer1D_contl_cnt = to_unsigned(16#0F#, 5) ELSE
      '0';
  
  Deserializer1D_innerRegEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  
  Deserializer1D_innerRegCtrolEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  Deserializer1D_outBypassEn <= '1';

  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 14
  Counter_Limited1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited1_out1 = to_unsigned(16#0E#, 8) THEN 
          Counter_Limited1_out1 <= to_unsigned(16#00#, 8);
        ELSE 
          Counter_Limited1_out1 <= Counter_Limited1_out1 + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited1_process;


  Deserializer1D_tapDelayComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_tapout <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout(14) <= Counter_Limited1_out1;
        Deserializer1D_tapout(0 TO 13) <= Deserializer1D_tapout(1 TO 14);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut(0) <= Deserializer1D_tapout(0);
  Deserializer1D_muxOut(1) <= Deserializer1D_tapout(1);
  Deserializer1D_muxOut(2) <= Deserializer1D_tapout(2);
  Deserializer1D_muxOut(3) <= Deserializer1D_tapout(3);
  Deserializer1D_muxOut(4) <= Deserializer1D_tapout(4);
  Deserializer1D_muxOut(5) <= Deserializer1D_tapout(5);
  Deserializer1D_muxOut(6) <= Deserializer1D_tapout(6);
  Deserializer1D_muxOut(7) <= Deserializer1D_tapout(7);
  Deserializer1D_muxOut(8) <= Deserializer1D_tapout(8);
  Deserializer1D_muxOut(9) <= Deserializer1D_tapout(9);
  Deserializer1D_muxOut(10) <= Deserializer1D_tapout(10);
  Deserializer1D_muxOut(11) <= Deserializer1D_tapout(11);
  Deserializer1D_muxOut(12) <= Deserializer1D_tapout(12);
  Deserializer1D_muxOut(13) <= Deserializer1D_tapout(13);
  Deserializer1D_muxOut(14) <= Deserializer1D_tapout(14);
  Deserializer1D_muxOut(15) <= Counter_Limited1_out1;

  Deserializer1D_regComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_out1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_out1 <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_regComp_process;


  Deserializer1D_out1_0 <= Deserializer1D_out1(0);

  constellationLUTaddress <= Deserializer1D_out1_0(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband_out1_re <= alpha_table_data_re(to_integer(constellationLUTaddress));
  Rectangular_QAM_Modulator_Baseband_out1_im <= alpha_table_data_im(to_integer(constellationLUTaddress));

  Deserializer1D_out1_1 <= Deserializer1D_out1(1);

  constellationLUTaddress_1 <= Deserializer1D_out1_1(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband1_out1_re <= alpha_table_data_re_2(to_integer(constellationLUTaddress_1));
  Rectangular_QAM_Modulator_Baseband1_out1_im <= alpha_table_data_im_2(to_integer(constellationLUTaddress_1));

  Deserializer1D_out1_2 <= Deserializer1D_out1(2);

  constellationLUTaddress_2 <= Deserializer1D_out1_2(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband2_out1_re <= alpha_table_data_re_4(to_integer(constellationLUTaddress_2));
  Rectangular_QAM_Modulator_Baseband2_out1_im <= alpha_table_data_im_4(to_integer(constellationLUTaddress_2));

  Deserializer1D_out1_3 <= Deserializer1D_out1(3);

  constellationLUTaddress_3 <= Deserializer1D_out1_3(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband3_out1_re <= alpha_table_data_re_6(to_integer(constellationLUTaddress_3));
  Rectangular_QAM_Modulator_Baseband3_out1_im <= alpha_table_data_im_6(to_integer(constellationLUTaddress_3));

  Deserializer1D_out1_4 <= Deserializer1D_out1(4);

  constellationLUTaddress_4 <= Deserializer1D_out1_4(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband4_out1_re <= alpha_table_data_re_8(to_integer(constellationLUTaddress_4));
  Rectangular_QAM_Modulator_Baseband4_out1_im <= alpha_table_data_im_8(to_integer(constellationLUTaddress_4));

  Deserializer1D_out1_5 <= Deserializer1D_out1(5);

  constellationLUTaddress_5 <= Deserializer1D_out1_5(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband5_out1_re <= alpha_table_data_re_10(to_integer(constellationLUTaddress_5));
  Rectangular_QAM_Modulator_Baseband5_out1_im <= alpha_table_data_im_10(to_integer(constellationLUTaddress_5));

  Deserializer1D_out1_6 <= Deserializer1D_out1(6);

  constellationLUTaddress_6 <= Deserializer1D_out1_6(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband6_out1_re <= alpha_table_data_re_12(to_integer(constellationLUTaddress_6));
  Rectangular_QAM_Modulator_Baseband6_out1_im <= alpha_table_data_im_12(to_integer(constellationLUTaddress_6));

  Deserializer1D_out1_7 <= Deserializer1D_out1(7);

  constellationLUTaddress_7 <= Deserializer1D_out1_7(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband7_out1_re <= alpha_table_data_re_14(to_integer(constellationLUTaddress_7));
  Rectangular_QAM_Modulator_Baseband7_out1_im <= alpha_table_data_im_14(to_integer(constellationLUTaddress_7));

  Deserializer1D_out1_8 <= Deserializer1D_out1(8);

  constellationLUTaddress_8 <= Deserializer1D_out1_8(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband8_out1_re <= alpha_table_data_re_16(to_integer(constellationLUTaddress_8));
  Rectangular_QAM_Modulator_Baseband8_out1_im <= alpha_table_data_im_16(to_integer(constellationLUTaddress_8));

  Deserializer1D_out1_9 <= Deserializer1D_out1(9);

  constellationLUTaddress_9 <= Deserializer1D_out1_9(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband9_out1_re <= alpha_table_data_re_18(to_integer(constellationLUTaddress_9));
  Rectangular_QAM_Modulator_Baseband9_out1_im <= alpha_table_data_im_18(to_integer(constellationLUTaddress_9));

  Deserializer1D_out1_10 <= Deserializer1D_out1(10);

  constellationLUTaddress_10 <= Deserializer1D_out1_10(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband10_out1_re <= alpha_table_data_re_20(to_integer(constellationLUTaddress_10));
  Rectangular_QAM_Modulator_Baseband10_out1_im <= alpha_table_data_im_20(to_integer(constellationLUTaddress_10));

  Deserializer1D_out1_11 <= Deserializer1D_out1(11);

  constellationLUTaddress_11 <= Deserializer1D_out1_11(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband11_out1_re <= alpha_table_data_re_22(to_integer(constellationLUTaddress_11));
  Rectangular_QAM_Modulator_Baseband11_out1_im <= alpha_table_data_im_22(to_integer(constellationLUTaddress_11));

  Deserializer1D_out1_12 <= Deserializer1D_out1(12);

  constellationLUTaddress_12 <= Deserializer1D_out1_12(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband12_out1_re <= alpha_table_data_re_24(to_integer(constellationLUTaddress_12));
  Rectangular_QAM_Modulator_Baseband12_out1_im <= alpha_table_data_im_24(to_integer(constellationLUTaddress_12));

  Deserializer1D_out1_13 <= Deserializer1D_out1(13);

  constellationLUTaddress_13 <= Deserializer1D_out1_13(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband13_out1_re <= alpha_table_data_re_26(to_integer(constellationLUTaddress_13));
  Rectangular_QAM_Modulator_Baseband13_out1_im <= alpha_table_data_im_26(to_integer(constellationLUTaddress_13));

  Deserializer1D_out1_14 <= Deserializer1D_out1(14);

  constellationLUTaddress_14 <= Deserializer1D_out1_14(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband14_out1_re <= alpha_table_data_re_28(to_integer(constellationLUTaddress_14));
  Rectangular_QAM_Modulator_Baseband14_out1_im <= alpha_table_data_im_28(to_integer(constellationLUTaddress_14));

  Deserializer1D_out1_15 <= Deserializer1D_out1(15);

  constellationLUTaddress_15 <= Deserializer1D_out1_15(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband15_out1_re <= alpha_table_data_re_30(to_integer(constellationLUTaddress_15));
  Rectangular_QAM_Modulator_Baseband15_out1_im <= alpha_table_data_im_30(to_integer(constellationLUTaddress_15));

  Mux_out1_re(0) <= Rectangular_QAM_Modulator_Baseband_out1_re;
  Mux_out1_re(1) <= Rectangular_QAM_Modulator_Baseband1_out1_re;
  Mux_out1_re(2) <= Rectangular_QAM_Modulator_Baseband2_out1_re;
  Mux_out1_re(3) <= Rectangular_QAM_Modulator_Baseband3_out1_re;
  Mux_out1_re(4) <= Rectangular_QAM_Modulator_Baseband4_out1_re;
  Mux_out1_re(5) <= Rectangular_QAM_Modulator_Baseband5_out1_re;
  Mux_out1_re(6) <= Rectangular_QAM_Modulator_Baseband6_out1_re;
  Mux_out1_re(7) <= Rectangular_QAM_Modulator_Baseband7_out1_re;
  Mux_out1_re(8) <= Rectangular_QAM_Modulator_Baseband8_out1_re;
  Mux_out1_re(9) <= Rectangular_QAM_Modulator_Baseband9_out1_re;
  Mux_out1_re(10) <= Rectangular_QAM_Modulator_Baseband10_out1_re;
  Mux_out1_re(11) <= Rectangular_QAM_Modulator_Baseband11_out1_re;
  Mux_out1_re(12) <= Rectangular_QAM_Modulator_Baseband12_out1_re;
  Mux_out1_re(13) <= Rectangular_QAM_Modulator_Baseband13_out1_re;
  Mux_out1_re(14) <= Rectangular_QAM_Modulator_Baseband14_out1_re;
  Mux_out1_re(15) <= Rectangular_QAM_Modulator_Baseband15_out1_re;

  outputgen1: FOR k IN 0 TO 15 GENERATE
    Mux_out1_re_1(k) <= std_logic_vector(Mux_out1_re(k));
  END GENERATE;

  Mux_out1_im(0) <= Rectangular_QAM_Modulator_Baseband_out1_im;
  Mux_out1_im(1) <= Rectangular_QAM_Modulator_Baseband1_out1_im;
  Mux_out1_im(2) <= Rectangular_QAM_Modulator_Baseband2_out1_im;
  Mux_out1_im(3) <= Rectangular_QAM_Modulator_Baseband3_out1_im;
  Mux_out1_im(4) <= Rectangular_QAM_Modulator_Baseband4_out1_im;
  Mux_out1_im(5) <= Rectangular_QAM_Modulator_Baseband5_out1_im;
  Mux_out1_im(6) <= Rectangular_QAM_Modulator_Baseband6_out1_im;
  Mux_out1_im(7) <= Rectangular_QAM_Modulator_Baseband7_out1_im;
  Mux_out1_im(8) <= Rectangular_QAM_Modulator_Baseband8_out1_im;
  Mux_out1_im(9) <= Rectangular_QAM_Modulator_Baseband9_out1_im;
  Mux_out1_im(10) <= Rectangular_QAM_Modulator_Baseband10_out1_im;
  Mux_out1_im(11) <= Rectangular_QAM_Modulator_Baseband11_out1_im;
  Mux_out1_im(12) <= Rectangular_QAM_Modulator_Baseband12_out1_im;
  Mux_out1_im(13) <= Rectangular_QAM_Modulator_Baseband13_out1_im;
  Mux_out1_im(14) <= Rectangular_QAM_Modulator_Baseband14_out1_im;
  Mux_out1_im(15) <= Rectangular_QAM_Modulator_Baseband15_out1_im;

  outputgen: FOR k IN 0 TO 15 GENERATE
    Mux_out1_im_1(k) <= std_logic_vector(Mux_out1_im(k));
  END GENERATE;

  Constant_out1 <= '1';

  ce_out <= enb_1_16_1;



  real_rsvd <= IFFT_HDL_Optimized_out1_re;

  imag <= IFFT_HDL_Optimized_out1_im;

END rtl;

